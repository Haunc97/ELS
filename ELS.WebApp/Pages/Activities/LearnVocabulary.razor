@page "/learn"
@using Azure.Core;
@using System.Web;
@using static ELS.WebApp.Controls.LearnCardComponent;
@inject IMediator Mediator
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<h3>Learn Vocabulary</h3>
<br />
<LearnCardComponent SearchingFunc="SearchVocabularies" GoDetailFunc="NavigateToVocDetail" BgImgs="bgImgs"></LearnCardComponent>
<br />
@if (stdSet != null)
{
    <p class="topic-title text-center">Topic: <a href="editstudyset/@stdSet.Id">@stdSet.Title</a></p>
}

@code {
    public string[] bgImgs = { "/imgs/learn-bg.jpg", "/imgs/learn-bg-1.jpg", "/imgs/learn-bg-2.jpg", "/imgs/learn-bg-15.jpg", "/imgs/learn-bg-10.jpg" };
    private long? stdSetId = null;
    private StudySet stdSet = null;

    protected override async Task OnInitializedAsync()
    {
        var query = NavManager.ToAbsoluteUri(NavManager.Uri).Query;
        var queryParams = System.Web.HttpUtility.ParseQueryString(query);
        if (long.TryParse(queryParams["stdSetId"], out long id))
        {
            stdSetId = id;
            stdSet = await Mediator.Send(new Queries.StudySets.GetStudySetById.GetStudySetByIdQuery(stdSetId.Value));
        }
    }

    private async Task<List<LearnCardItem>> SearchVocabularies()
    {
        List<Vocabulary> vocs = null;

        if (stdSetId.HasValue)
        {
            vocs = await Mediator.Send(new Queries.Vocabularies.GetVocabulariesByStudySet.GetVocabulariesByStudySetQuery(stdSetId.Value));
        }
        else
        {
            var allVocs = await Mediator.Send(new Queries.Vocabularies.SearchVocabularies.SearchVocabulariesQuery());

            //replicateByLevel(allVocs);
            GetRandomVocabularies(allVocs, out vocs);
        }

        return vocs?.Select(x => new LearnCardItem(x.Definition, x.Term, $"/editvocabulary/{x.Id}", x.Phonetics)).ToList();
    }

    private void GetRandomVocabularies(List<Vocabulary> vocbs, out List<Vocabulary> rndVocbs, int qty = 10)
    {
        rndVocbs = new List<Vocabulary>();

        if (vocbs == null || !vocbs.Any()) return;

        if (vocbs.Count > qty)
        {
            var rnd = new Random();

            int i = 0;
            while (i < qty)
            {
                var rndMember = vocbs[rnd.Next(vocbs.Count)];
                if (!rndVocbs.Contains(rndMember))
                {
                    rndVocbs.Add(rndMember);
                    i++;
                }
            }
        }
        else
        {
            rndVocbs.AddRange(vocbs);
        }

    }

    private void NavigateToVocDetail(long id)
    {
        NavManager.NavigateTo($"/editvocabulary/{id}");
    }
}