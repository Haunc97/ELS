@using ELS.UseCase.Utils;
@using System.ComponentModel.DataAnnotations;
@using ELS.WebApp.Models;
@using System.Timers;
@implements IDisposable;

<div class="row">
    <div class="col-lg-3">
        <label for="term">Term</label>
        <input id="term"
               type="text"
               class="form-control"
               placeholder="Type term here to search"
               @oninput="ResetTimer" />
    </div>
    <div class="col-lg-3">
        <label for="cls">Classification</label>
        <select id="cls" class="form-control" @onchange="OnClassificationChanged">
            <option value="0" selected>Select</option>
            @foreach (var wordType in Enum.GetValues(typeof(WordClassType)))
            {
                <option value="@((int)wordType)">@(((WordClassType)wordType).GetAttribute<DisplayAttribute>().Name)</option>
            }
        </select>
    </div>
    <div class="col-lg-3">
        <label for="lv">Level</label>
        <select id="lv" class="form-control" @onchange="OnLevelChanged">
            <option value="0" selected>Select</option>
            @foreach (var vocLevel in Enum.GetValues(typeof(VocabularyLevel)))
            {
                <option value="@((int)vocLevel)">@vocLevel</option>
            }
        </select>
    </div>
</div>

@code {
    private SearchVocabularyModel model = new SearchVocabularyModel();

    private Timer aTimer = default!;

    [Parameter]
    public EventCallback<SearchVocabularyModel> OnSearch { get; set; }

    protected override void OnInitialized()
    {
        aTimer = new Timer(1000);
        aTimer.Elapsed += OnTermInputFinished;
        aTimer.AutoReset = false;
        base.OnInitialized();
    }

    void ResetTimer(ChangeEventArgs args)
    {
        this.model.Term = args.Value.ToString();
        aTimer.Stop();
        aTimer.Start();
    }

    private async void OnTermInputFinished(Object? source, ElapsedEventArgs e)
    {
        //To avoid the error that you are trying to modify the state of your component from a different thread than the one that is associated with the renderer.
        // This can happen when you use a timer or a task that runs on a background thread.
        // To fix this, you need to use InvokeAsync () to switch execution to the renderer's synchronization context when triggering rendering or component state
        await InvokeAsync(async() =>
        {
            await SearchVocabularies();
        });
    }

    private async Task OnClassificationChanged(ChangeEventArgs args)
    {
        model.Classification = int.TryParse(args.Value.ToString(), out int result) && result != 0 ? (WordClassType)result : null;
        await SearchVocabularies();
    }

    private async Task OnLevelChanged(ChangeEventArgs args)
    {
        model.Level = int.TryParse(args.Value.ToString(), out int result) && result != 0 ? (VocabularyLevel)result : null;
        await SearchVocabularies();
    }

    private async Task SearchVocabularies()
    {
        await OnSearch.InvokeAsync(model);
    }

    void IDisposable.Dispose()
        =>
        aTimer?.Dispose();
}