@page "/learn"
@inject IMediator Mediator

<h3>Learn Vocabulary</h3>
<br />
@if (vocabularies != null && vocabularies.Any())
{
    <div class="carousel slide" data-ride="carousel" style="width: 70%; margin: 0 auto !important;">
        <div class="carousel-inner">
            @for (int i = 0; i < vocabularies.Count; i++)
            {
                <div class="@GetItemStyleClass(i)" style="position: relative">
                    <img src="@randomBg" class="d-block w-100">
                    <p @onclick="ToggleResult" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 2em; color: white; font-weight: bold; cursor: pointer">
                        @if (!showResult)
                        {
                            @vocabularies.ElementAt(i).Definition
                        }
                        else
                        {
                            @vocabularies.ElementAt(i).Term
                        }
                    </p>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-target="#carouselExampleControls" data-slide="prev" @onclick="GoPrevious">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-target="#carouselExampleControls" data-slide="next" @onclick="GoNext">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </button>
    </div>
}

@code {
    private string[] bgImgs = { "learn-bg.jpg", "learn-bg-1.jpg", "learn-bg-2.jpg" };
    private string randomBg = "";
    private List<Vocabulary> vocabularies;
    private int current = 0;
    private bool showResult = false;

    protected override async Task OnInitializedAsync()
    {
        randomBg = GetRandomBg();
        vocabularies = await Mediator.Send(new Queries.Vocabularies.SearchVocabularies.SearchVocabulariesQuery());
    }

    private void ToggleResult()
    {
        if (showResult)
        {
            GoNext();
        }
        else
        {
            showResult = true;
        }
    }

    private string GetItemStyleClass(int classIndex)
    {
        return classIndex == current ? "carousel-item active" : "carousel-item";
    }

    private string GetRandomBg()
    {
        Random rnd = new();
        int randomIndex = rnd.Next(bgImgs.Length);
        return "/" + bgImgs[randomIndex];
    }

    private void GoNext()
    {
        if (current == vocabularies.Count - 1) return;
        current += 1;
        showResult = false;
    }

    private void GoPrevious()
    {
        if (current == 0) return;
        current -= 1;
        showResult = false;
    }
}