@page "/learn"
@using Azure.Core;
@using System.Web;
@using static ELS.WebApp.Controls.LearnCardComponent;
@inject IMediator Mediator
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<h3>Learn Vocabulary</h3>
<br />
<LearnCardComponent SearchingFunc="SearchVocabularies" GoDetailFunc="NavigateToVocDetail" BgImgs="bgImgs"></LearnCardComponent>

@code {
    public string[] bgImgs = { "/imgs/learn-bg.jpg", "/imgs/learn-bg-1.jpg", "/imgs/learn-bg-2.jpg" };
    private long? stdSetId = null;

    protected override void OnInitialized()
    {
        var query = NavManager.ToAbsoluteUri(NavManager.Uri).Query;
        var queryParams = System.Web.HttpUtility.ParseQueryString(query);
        if (long.TryParse(queryParams["stdSetId"], out long id))
        {
            stdSetId = id;
        }
    }

    private async Task<List<LearnCardItem>> SearchVocabularies()
    {
        List<Vocabulary> vocs = null;

        if (stdSetId.HasValue)
        {
            vocs = await Mediator.Send(new Queries.Vocabularies.GetVocabulariesByStudySet.GetVocabulariesByStudySetQuery(stdSetId.Value));
        }
        else
        {
            vocs = await Mediator.Send(new Queries.Vocabularies.SearchVocabularies.SearchVocabulariesQuery());
        }

        return vocs?.Select(x => new LearnCardItem(x.Id, x.Definition, x.Term)).ToList();
    }

    private void NavigateToVocDetail(long id)
    {
        NavManager.NavigateTo($"/editvocabulary/{id}");
    }
}