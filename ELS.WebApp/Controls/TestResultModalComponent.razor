<div class="@modalClassName" id="testResultModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary text-light fw-bold">
                <h5 class="modal-title" id="exampleModalLongTitle">Result</h5>
                <button type="button" class="close text-light" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Correct: </strong>@CorrectCount/@QuestionCount</p>
                <p>
                    <strong>Percentage: </strong>
                    <span class="@levelStyleClass">@percentage%</span>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning" data-dismiss="modal" @onclick="Retry"><span class="oi oi-reload"></span> Retry</button>
                <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="Continue"><span class="oi oi-arrow-circle-right"></span> Continue</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public int CorrectCount { get; set; } = 0;

    [Parameter]
    public int QuestionCount { get; set; } = 0;

    [Parameter]
    public EventCallback<bool> OnClosed { get; set; }

    [Parameter]
    public EventCallback OnContinued { get; set; }

    [Parameter]
    public EventCallback OnRetried { get; set; }

    private int percentage => QuestionCount > 0 ? ((CorrectCount * 100) / QuestionCount) : 0;

    private string levelStyleClass => percentage < 50 ? "text-danger" : (percentage < 70 ? "text-warning" : "text-success");

    private string modalClassName => IsOpen ? "modal fade show" : "modal fade";

    private void Close()
    {
        OnClosed.InvokeAsync(true);
    }

    private void Continue()
    {
        OnContinued.InvokeAsync();
    }

    private void Retry()
    {
        OnRetried.InvokeAsync();
    }
}