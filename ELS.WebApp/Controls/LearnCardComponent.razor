@inject IJSRuntime JSRuntime

@if (learnItems != null && learnItems.Any())
{
    <div class="carousel slide" data-ride="carousel">
        <div class="carousel-inner">
            @for (int i = 0; i < learnItems.Count; i++)
            {
                <div class="@GetItemStyleClass(i)" style="position: relative">
                    <img src="@randomBg" class="d-block w-100">
                    <p id="vocabulary" @onclick="ToggleResult" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 2em; color: white; font-weight: bold; cursor: pointer">
                        @if (!showResult)
                        {
                            @learnItems.ElementAt(i).Term
                        }
                        else
                        {
                            @learnItems.ElementAt(i).Result
                        }
                    </p>
                    <div class="carousel-caption d-none d-md-block">
                        <h5>@(current + 1) of @learnItems.Count</h5>
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-target="#carouselExampleControls" data-slide="prev" @onclick="GoPrevious">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-target="#carouselExampleControls" data-slide="next" @onclick="GoNext">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </button>
    </div>
}

@code {
    [Parameter]
    public Func<Task<List<LearnCardItem>>> SearchingFunc { get; set; } = null;

    [Parameter]
    public Action<long> GoDetailFunc { get; set; } = null;

    [Parameter]
    public string[] BgImgs { get; set; } = { "/imgs/learn-bg.jpg" };

    private List<LearnCardItem> learnItems = null;

    private string randomBg = "";
    private int current = 0;
    private bool showResult = false;

    protected override async Task OnInitializedAsync()
    {
        randomBg = GetRandomBg();
        learnItems = await SearchingFunc();

        var random = new Random();
        learnItems = learnItems?.OrderBy(x => random.Next()).ToList();
    }

    private void ToggleResult()
    {
        if (showResult)
        {
            GoNext();
        }
        else
        {
            showResult = true;
        }
    }

    private string GetItemStyleClass(int classIndex)
    {
        return classIndex == current ? "carousel-item active" : "carousel-item";
    }

    private string GetRandomBg()
    {
        Random rnd = new();
        int randomIndex = rnd.Next(BgImgs.Length);
        return BgImgs[randomIndex];
    }

    private void GoNext()
    {
        if (current == learnItems.Count - 1) return;
        current += 1;
        showResult = false;
    }

    private void GoPrevious()
    {
        if (current == 0) return;
        current -= 1;
        showResult = false;
    }

    public record LearnCardItem(long Id, string Term, string Result);
}
