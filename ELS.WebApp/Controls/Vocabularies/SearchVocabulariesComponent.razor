@using ELS.UseCase.Utils;
@using System.ComponentModel.DataAnnotations;

<div class="row">
    <div class="col-lg-3">
        <label for="term">Term</label>
        <input id="term"
               type="text"
               class="form-control"
               placeholder="Type term here to search"
               @bind="term" />
    </div>
    <div class="col-lg-3">
        <label for="class">Classification</label>
        <select id="act" class="form-control" @bind="selectedClassification">
            <option value="0" selected>Select</option>
            @foreach (var wordType in Enum.GetValues(typeof(WordClassType)))
            {
                <option value="@((int)wordType)">@(((WordClassType)wordType).GetAttribute<DisplayAttribute>().Name)</option>
            }
        </select>
    </div>
    <div class="col-lg-3">
        <label for="class">Level</label>
        <select id="act" class="form-control" @bind="selectedLevel">
            <option value="0" selected>Select</option>
            @foreach (var vocLevel in Enum.GetValues(typeof(VocabularyLevel)))
            {
                <option value="@((int)vocLevel)">@vocLevel</option>
            }
        </select>
    </div>
    <div class="col-lg-3 align-self-end">
        <button type="button" class="btn btn-primary" @onclick="SearchVocabularies"><span class="oi oi-magnifying-glass"></span></button>
        <button type="button" class="btn btn-secondary" @onclick="ClearSearch"><span class="oi oi-reload"></span></button>
    </div>
</div>

@code {
    private string term = null;

    private int selectedClassification = 0;

    private int selectedLevel = 0;

    [Parameter]
    public EventCallback<SearchVocabularyForm> OnSearch { get; set; }

    private async Task ClearSearch()
    {
        this.term = "";
        this.selectedClassification = 0;
        this.selectedLevel = 0;
        await SearchVocabularies();
    }

    private async Task SearchVocabularies()
    {
        WordClassType? classification = null;
        if (selectedClassification != 0) classification = (WordClassType)selectedClassification;

        VocabularyLevel? level = null;
        if (selectedLevel != 0) level = (VocabularyLevel)selectedLevel;

        await OnSearch.InvokeAsync(new SearchVocabularyForm
            {
                Term = this.term,
                Classification = classification,
                Level = level
            }
        );
    }

    public class SearchVocabularyForm
    {
        public string Term { get; set; } = null;

        public WordClassType? Classification { get; set; } = null;

        public VocabularyLevel? Level { get; set; } = null;
    }
}