@page "/vocabularies"
@using ELS.UseCase.Utils;
@using System.ComponentModel.DataAnnotations;
@using ELS.WebApp.Models;
@using static ELS.WebApp.Controls.Vocabularies.SearchVocabulariesComponent;

@inject NavigationManager NavigationManager;
@inject IMediator Mediator

<PageTitle>List of Vocabularies</PageTitle>

<div class="row">
    <div class="col-sm">
        <h3 class="page-title">List of Vocabularies (@(vocabularies != null ? vocabularies.Count : 0))</h3>
    </div>
    <div class="col-sm d-flex justify-content-end">
        <div class="btn-container">
            <button type="button" class="btn btn-success" @onclick="AddVocabulary"><span class="oi oi-plus"></span></button>
            <button type="button" class="btn btn-success" @onclick="ImportVocabulary"><span class="oi oi-cloud-upload"></span></button>
            <button type="button" class="btn btn-primary" @onclick="LearnVocabulary"><span class="oi oi-layers"></span></button>
        </div>
    </div>
</div>
<br />
<SearchVocabulariesComponent OnSearch="OnSearchVocabularies"></SearchVocabulariesComponent>
<br />
@if (vocabularies != null)
{
    <table class="table">
        <thead>
            <tr>
                <th width="22%">Term</th>
                <th width="22%">Definition</th>
                <th width="18%">Phonetics</th>
                <th width="13%">Classification</th>
                <th width="12%">Level</th>
                <th width="13%">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in vocabularies)
            {
                <tr id="@item.Id">
                    <td width="300"><a style="cursor: pointer" @onclick="@(() => ViewVocabulary(item))">@item.Term</a></td>
                    <td width="300">@item.Definition</td>
                    <td>@item.Phonetics</td>
                    <td>@(item.Classification.GetAttribute<DisplayAttribute>().Name)</td>
                    <td>@item.Level</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => EditVocabulary(item.Id))"><span class="oi oi-pencil"></span></button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="@(() => DeleteVocabulary(item.Id))"><span class="oi oi-trash"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<ViewVocabularyComponent IsDisplay="showVocabularyDetail"
                         Vocabulary="selectedVocabulary"
                         OnToggleDisplay="OnToggleViewDisplay">
</ViewVocabularyComponent>

<ToastComponent Show="showSuccessToast"
                Title="Vocabulary"
                Message="Delete vocabulary successfully."
                ToastDisplayToggled="@(() => showSuccessToast = false)">
</ToastComponent>

@code {
    private List<Vocabulary> vocabularies = null;
    private bool showSuccessToast = false;
    private bool showVocabularyDetail = false;
    private Vocabulary? selectedVocabulary = null;

    protected override async Task OnInitializedAsync()
    {
        await SearchVocabularies();
    }

    private async Task SearchVocabularies(string term = "", WordClassType? classification = null, VocabularyLevel? level = null)
    {
        var request = new Queries.Vocabularies.SearchVocabularies.SearchVocabulariesQuery(
            Term: term,
            Classification: classification,
            Level: level);
        vocabularies = await Mediator.Send(request);
    }

    private async Task OnSearchVocabularies(SearchVocabularyModel searchFrm)
    {
        await SearchVocabularies(searchFrm.Term, searchFrm.Classification, searchFrm.Level);
    }

    private void OnToggleViewDisplay(bool value)
    {
        this.showVocabularyDetail = value;
    }

    private void ViewVocabulary(Vocabulary voc)
    {
        this.selectedVocabulary = voc;
        showVocabularyDetail = true;
    }

    private void AddVocabulary()
    {
        NavigationManager.NavigateTo("/addvocabulary");
    }

    private void ImportVocabulary()
    {
        NavigationManager.NavigateTo("/importvocabularies");
    }

    private void LearnVocabulary()
    {
        NavigationManager.NavigateTo("/learn");
    }

    private void EditVocabulary(long vocId)
    {
        NavigationManager.NavigateTo($"/editvocabulary/{vocId}");
    }

    private async Task DeleteVocabulary(long vocId)
    {
        await Mediator.Send(new Commands.Vocabularies.DeleteVocabulary.DeleteVocabularyCommand(vocId, "System"));
        showSuccessToast = true;
        await SearchVocabularies();
    }
}