@using ELS.WebApp.Models;
@using static ELS.WebApp.Controls.Questions.SingleChoiceQuestionComponent;
@using static ELS.WebApp.Pages.Activities.TestVocabulary;
<div class="card">
    <div class="card-body">
        <p>
            <strong>@(Question.No + ". " + @Question.Term)</strong>

            @if (IsSubmitted)
            {
                @if (!Question.IsCorrect)
                {
                    <span class="oi oi-x text-danger" style="margin-left: 7px"></span>
                }
                else
                {
                    <span class="oi oi-check text-success" style="margin-left: 7px"></span>
                }
            }
        </p>
        <div class="">
            <div class="form-group">
                <input type="text"
                       class="form-control"
                       id="answer"
                       aria-describedby="answerHelp"
                       placeholder="Enter your answer"
                       disabled="@IsSubmitted"
                       @onchange="@((ChangeEventArgs args) => OnValueChange(args))">
                @if (!Question.IsCorrect && IsSubmitted)
                {
                    <small id="answerHelp" class="form-text text-success"><strong>Answer: </strong>@Question.Definition</small>
                }
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public QuestionModel Question { get; set; }

    [Parameter]
    public bool IsSubmitted { get; set; } = false;

    [Parameter]
    public EventCallback<AnswerModel> OnChanged { get; set; }

    private void OnValueChange(ChangeEventArgs args)
    {
        var value = args.Value.ToString();
        this.OnChanged.InvokeAsync(new AnswerModel
            {
                QuestionNo = Question.No,
                Answer = value
            });
    }
}